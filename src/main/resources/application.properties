# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.
#spring.datasource.data= # Data (DML) script resource reference.
#spring.datasource.data-username=  # User of the database to execute DML scripts (if different).
#spring.datasource.data-password=  # Password of the database to execute DML scripts (if different).
#spring.datasource.dbcp.*= # Commons DBCP specific settings
#spring.datasource.dbcp2.*= # Commons DBCP2 specific settings
#spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
#spring.datasource.hikari.*= # Hikari specific settings
#spring.datasource.initialize=true # Populate the database using 'data.sql'.
#spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).
#spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username & password are ignored when set.
#spring.datasource.name=testdb # Name of the datasource.
#spring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).
#spring.datasource.schema= # Schema (DDL) script resource reference.
#spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).
#spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).
#spring.datasource.separator=; # Statement separator in SQL initialization scripts.
#spring.datasource.sql-script-encoding= # SQL scripts encoding.
#spring.datasource.tomcat.*= # Tomcat datasource specific settings
#spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
#H2:jdbc:h2:tcp://localhost/~/test | mysql:jdbc:mysql://localhost:3306/cocodas
spring.datasource.url= jdbc:h2:tcp://localhost/~/cocodas
#cocodas cocodas
spring.datasource.username= sa
spring.datasource.password= 

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
#spring.data.jpa.repositories.enabled=true # Enable JPA repositories.
#spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
#spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.
##spring.jpa.generate-ddl=false # Initialize the schema on startup.
#spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.
#spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.

##spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.
##spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
#spring.jpa.properties.*= # Additional native properties to set on the JPA provider.
spring.jpa.show-sql=true
#org.hibernate.dialect.H2Dialect | org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.
spring.jpa.hibernate.ddl-auto=update
# Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.
spring.jpa.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy
